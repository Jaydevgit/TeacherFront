<template>
  <div class="app-container">
    <div class="filter-container">
      <el-form>
        <el-form-item>
          <el-button style="float: left" type="primary" icon="plus" @click="showCreate" v-if="hasPerm('teacher:add')">添加
          </el-button>
          <el-button style="float:right;margin-right: 15px;margin-top: 3px;" size="small" type="success" icon="plus"
                     @click="getList">所有教师
          </el-button>
          <el-button type="primary" size="small" style="float:right;margin-right: 15px;margin-top: 3px;"
                     @click="searchTeahcer">搜索
          </el-button>
          <el-input v-model="searchKey" style="width: 150px;float:right;height: 24px;margin-right: 15px;"
                    placeholder="搜索要查询的信息"
                    @keydown.enter.native="searchTeahcer"></el-input>
          <el-input type="text" style="display:none"/> <!--确保keydown.enter触发-->
          <div style="float: right" v-if="totalUpdate>0">
            <el-badge :value="totalUpdate" :max="99" class="item">
              <span style="color:red">学者网有更新</span>
            </el-badge>
          </div>

          <div style="clear: both;"></div>
        </el-form-item>
        <el-form-item style="margin-bottom:0;display:none;">
        </el-form-item>
      </el-form>
    </div>
    <el-table :data="list"
              v-loading.body="listLoading" element-loading-text="拼命加载中" border fit
              highlight-current-row>
      <el-table-column align="center" label="序号" width="60">
        <template slot-scope="scope">
          <span v-text="getIndex(scope.$index)"> </span>
        </template>
      </el-table-column>
      <el-table-column align="center" label="头像" width="150">

        <template slot-scope="scope">
          <template v-if="scope.row.scholat_update_time > scope.row.update_time">
            <el-badge is-dot aria-setsize="14px" class="item" style="margin-top: 10px;">
              <img class="preview" @click="routerTo(scope.row)" :src="getImgUrl(scope.row.avatar)"
                   :onerror="defaultImage" style="width:60px;height:60px;cursor:pointer;"/>
            </el-badge>
          </template>
          <template v-else>
            <img class="preview" @click="routerTo(scope.row)" :src="getImgUrl(scope.row.avatar)"
                 style="width:60px;height:60px;cursor:pointer;"/>
          </template>
        </template>

      </el-table-column>
      <el-table-column align="center" label="姓名" width="130">
        <template slot-scope="scope">
          <span class="teacher-homepage" @click="routerTo(scope.row)" style="cursor:pointer;">{{scope.row.name}}</span>
          <span></span>
        </template>
      </el-table-column>
      <el-table-column align="center" label="状态" width="100">
        <template slot-scope="scope">
          <el-tag
            :type="scope.row.state === '在岗' ? 'primary' : 'success'"
            disable-transitions>
            <span v-text='getState(scope.row.state)'></span>
          </el-tag>
        </template>
      </el-table-column>
      <el-table-column align="center" label="职务" width="180">
        <template slot-scope="scope">
          <span>{{scope.row.post}}</span>
        </template>
      </el-table-column>
      <el-table-column align="center" label="学者网关联">
        <template slot-scope="scope">
          <span>{{scope.row.scholat_update_time}}</span>
          <template v-if="scope.row.scholat_update_time > scope.row.update_time">
            <div style="color:red">学者网有更新信息</div>
          </template>
          <template v-if="!scope.row.scholat_update_time && scope.row.scholat_username">
            <div style="color:red">已绑定学者网账号，但未查询到学者网更新日期</div>
          </template>
          <el-button type="success" @click="inviteToScholat(scope.row)" size="small"
                     v-if="!scope.row.scholat_username">邀请加入学者网
          </el-button>
        </template>
      </el-table-column>
      <el-table-column align="center" label="更新时间" width="170">
        <template slot-scope="scope">
          <span>{{scope.row.update_time}}</span>
        </template>
      </el-table-column>
      <el-table-column fixed="right" align="center" label="管理" width="200" v-if="hasPerm('teacher:update')">
        <template slot-scope="scope">
          <template v-if="scope.row.scholat_update_time > scope.row.update_time">
            <el-button type="warning" icon="el-icon-edit" circle @click="showUpdate(scope.row)"></el-button>
          </template>
          <template v-else>
            <el-button type="primary" icon="el-icon-edit" circle @click="showUpdate(scope.row)"></el-button>
          </template>
          <el-button type="danger" icon="el-icon-delete" circle v-if="hasPerm('teacher:delete')"
                     @click="removeTeacher(scope.row.id)"></el-button>
        </template>
      </el-table-column>
    </el-table>
    <el-pagination
      @size-change="handleSizeChange"
      @current-change="handleCurrentChange"
      :current-page="listQuery.pageNum"
      :page-size="listQuery.pageRow"
      :total="totalCount"
      :page-sizes="[10, 20, 50, 100]"
      layout="total, sizes, prev, pager, next, jumper">
    </el-pagination>

  </div>
</template>
<script>
    import teacherPersonalHomePage from '../teacher/teacherPersonalHomePage'
    import store from '../../store'

    export default {
        // -------------------这个用来获取路由表, 因为我点击教师链接需要跳转到教师主页
        components: {teacherPersonalHomePage},
        data() {
            return {
                defaultImage: 'this.src="../../src/assets/img/defaultAvatar.png"',
                searchKey: '',
                totalCount: 0, //分页组件--数据总条数
                totalUpdate: 0,// 学者网更新总数
                list: [],//表格的数据
                listLoading: false,//数据加载等待动画
                listQuery: {
                    pageNum: 1,//页码
                    pageRow: 10,//每页条数
                    unitId: '',
                    key: ''
                },
                currentSearch: 'false',
                dialogStatus: 'create',
                dialogFormVisible: false,
                textMap: {
                    update: '编辑',
                    create: '添加新成员'
                },
                tempTeacher: {
                    id: "",
                    name: "",
                    sex: 0,
                    avatar: '',
                    department: '',
                    post: '',
                    state: 1,
                    intro: '',
                    update_time: '',
                    email: '',
                    phone: ''
                }
            }
        },
        created() {
            console.log("--------------------开始查询教师权限")
            this.getList();
        },
        methods: {
            inviteToScholat(Form) {
                this.$confirm('此操作将会给该用户发送邀请邮件, 是否继续?', '提示', {
                    confirmButtonText: '确认发送邀请',
                    cancelButtonText: '取消',
                    type: 'success'
                }).then(() => {
                    this.$message.success("准备邀请" + Form.email + "加入学者网");
                    this.api({
                        url: '/scholat/invite',
                        method: 'post',
                        data: {
                            "form": Form
                        }
                    }).then((data) => {
                        this.$message.success("邀请" + Form.email + "成功")
                    }).catch(e => {
                        this.$message.error("邀请" + Form.email + "失败")
                    })
                }).catch(() => {
                    this.$message({
                        type: 'info',
                        message: '已取消邀请'
                    });
                });
            },
            updateFromScholat() {
                this.$message.error("正在写")

            },
            searchTeahcer() {
                this.listQuery.pageNum = 1;
                this.listQuery.unitId = this.$store.state.user.unitId
                this.listQuery.key = this.searchKey
                if (this.searchKey != null && this.searchKey != "") {
                    this.api({
                        url: "/manager/searchTeacher",
                        method: "get",
                        params: this.listQuery
                    }).then(data => {
                        this.list = data.list;
                        this.totalCount = data.totalCount;
                        this.totalUpdate = data.totalUpdate;
                        this.currentSearch = true;
                    }).catch(error => {
                        console.log("QAQ........获取教师失败")
                    })
                }
            },
            changeTeahcer() {
                this.listQuery.unitId = this.$store.state.user.unitId
                this.listQuery.key = this.searchKey
                this.api({
                    url: "/manager/searchTeacher",
                    method: "get",
                    params: this.listQuery
                }).then(data => {
                    this.list = data.list;
                    this.totalCount = data.totalCount;
                    this.totalUpdate = data.totalUpdate;
                }).catch(error => {
                    console.log("QAQ........获取教师失败")
                })
            },
            removeTeacher(teacherId) {
                var _vue = this;
                this.$confirm('确定删除该教师?', '提示', {
                    confirmButtonText: '确定',
                    showCancelButton: false,
                    type: 'warning'
                }).then(() => {
                    _vue.api({
                        url: "/manager/deleteTeacher",
                        method: "post",
                        data: {
                            "teacherId": teacherId
                        }
                    }).then((data) => {
                        this.$message.success("删除该教师成功")
                        this.getList();
                    }).catch(e => {
                        this.$message.error("QAQ.....")
                    })
                })
            },
            getState(state) {
                if (state == 1) {
                    return "在岗"
                } else if (state == 0) {
                    return "调出"
                } else {
                    return "退休"
                }
            },
            getImgUrl(imgName) {
                if (imgName == null) {
                    return ""
                } else if (imgName.indexOf("resources") != "-1") {
                    return "http://www.scholat.com/" + imgName;
                } else {
                    return "http://47.106.132.95:2333/images/avatar/" + imgName;
                }
            },
            routerTo(teacher) {
                console.log("=========================================")
                console.log("点击跳转........" + teacher.name);
                let routeData = this.$router.resolve({
                    name: 'teacherPersonlHomePage',
                    params: {
                        id: teacher.id
                    }
                });
                window.open(routeData.href, '_blank');
              /*  this.$router.push({
                    name: 'teacherPersonlHomePage',
                    params: {
                        id: teacher.id
                    }
                })*/
            },
            getList() {
                //查询列表
                if (!this.hasPerm('teacher:list')) {
                    return
                }
                this.listQuery.pageNum = 1;
                this.listQuery.unitId = this.$store.state.user.unitId;
                console.log('unitId==' + this.listQuery.unitId);
                this.listLoading = true;
                console.log("### 开始查询教师成员列表")
                this.api({
                    url: "/manager/listTeacher",
                    method: "get",
                    params: this.listQuery
                }).then(data => {
                    console.log("查询教师信息为:" + data.totalUpdate)
                    console.log("=================展示教师列表信息===============")
                    this.listLoading = false;
                    this.list = data.list;
                    console.log(data.list);
                    this.list.forEach((v, k) => {
                        let t = v.update_time.replace(/\./g, '-').slice(0, 16);
                        v.update_time = t;
                    });
                    this.totalCount = data.totalCount;
                    this.totalUpdate = data.totalUpdate;
                    this.currentSearch = false
                }).catch(error => {
                    console.log("QAQ........没有找到教师列表")
                })
            },
            changeList() {
                //查询列表
                if (!this.hasPerm('teacher:list')) {
                    return
                }
                this.listQuery.unitId = this.$store.state.user.unitId;
                console.log('unitId==' + this.listQuery.unitId);
                this.listLoading = true;
                console.log("### 开始查询教师成员列表")
                this.api({
                    url: "/manager/listTeacher",
                    method: "get",
                    params: this.listQuery
                }).then(data => {
                    console.log("查询教师信息为:" + data.totalUpdate)
                    console.log("================================")
                    this.listLoading = false;
                    this.list = data.list;
                    this.totalCount = data.totalCount;
                    this.totalUpdate = data.totalUpdate;
                }).catch(error => {
                    console.log("QAQ........没有找到教师列表")
                })
            },
            handleSizeChange(val) {
                //改变每页数量
                this.listQuery.pageRow = val
                this.handleFilter();
            },
            handleCurrentChange(val) {
                //改变页码
                this.listQuery.pageNum = val
                if (!this.currentSearch)
                    this.changeList()
                else
                    this.changeTeahcer()
            },
            getIndex($index) {
                //表格序号
                return (this.listQuery.pageNum - 1) * this.listQuery.pageRow + $index + 1
            },
            showCreate() {
                //显示新增对话框
                /*this.tempTeacher.name = "";
                this.dialogStatus = "create"
                this.dialogFormVisible = true*/
                this.$router.push({
                    path: '/manager/addTeacher'
                })
            },
            showUpdate(teacher) {
                //显示修改对话框
                /*   this.tempTeacher.id = this.list[$index].id;
                   this.tempTeacher.name = this.list[$index].name;
                   this.dialogStatus = "update"
                   this.dialogFormVisible = true*/
                //修改文章
                let d1 = new Date(teacher.scholat_update_time);    //Tue Jul 04 2017 08:00:00 GMT+0800 (中国标准时间)
                let d2 = new Date(teacher.update_time);    //Wed Jul 05 2017 08:00:00 GMT+0800 (中国标准时间)

// 获取他们的距离1970年以来的毫秒
                let time1 = d1.getTime();
                let time2 = d2.getTime();
                var scholatUserName = "";
                if (time1 > time2) {
                    scholatUserName = teacher.scholat_username;
                }
                this.$router.push({
                    name: 'modifyTeacher',
                    params: {
                        t: teacher,
                        id: teacher.id,
                        scholatUpdate: scholatUserName
                    }
                })
            }
        }
    }
</script>
<style>
  .el-badge__content.is-dot {
    width: 15px;
    height: 15px;
  }
</style>
