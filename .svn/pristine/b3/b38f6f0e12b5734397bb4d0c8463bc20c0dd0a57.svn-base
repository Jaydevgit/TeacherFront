<template>
  <div class="container" style="padding-top: 30px;">
    <div style="clear: both;width: 480px;">
    </div>
    <div>

      <el-card class="box-card" style="width: 600px;float: left;margin-left: 40px">
        <div style=" height: 50px;text-align: center;margin-top: 40px">
          <el-button type="primary"  style=""
                     @click="showAdd">添加主栏目
          </el-button>
          <el-button type="success"  style=""
                     @click="sortCat">排序主栏目
          </el-button>
          <el-button type="warning"  style=""
                     @click="sortSubCat">排序子栏目
          </el-button>
        </div>
        <div style="margin-bottom: 10px; height: 40px;margin-top: 10px;text-align: center">
      <span v-if="sortVisualable" style="padding-left:60px;font-size: 16px;line-height: 28px; color: red">
        注：请依据您的点击顺序来排序栏目</span>
          <el-button type="success" size="small" style="margin-left: 20px;"
                     @click="sortSubmit" v-if="sortVisualable">提交排序
          </el-button>

          <span v-if="sortSubVisualable"
                style="padding-left:60px;font-size: 16px;line-height: 28px; color: red">
        注：请依据您的点击顺序来排序栏目</span>
          <el-button type="success" size="small" style="margin-left: 20px;"
                     @click="sortSubmit" v-if="sortSubVisualable">提交排序
          </el-button>
        </div>
        <el-menu
          default-active="0"
          class="el-menu-vertical-demo"
          style="width: 600px;float: left"
          background-color="#ffffff"
          @open="handleOpen"
          @close="handleClose">
          <el-checkbox-group v-model="checkList" @change="column_check">

            <el-menu-item index="0">
              <i class="el-icon-menu"></i>
              <span slot="title" class="parentCatalogue" style="font-size: 16px">师资队伍</span>
            </el-menu-item>

            <!--假如有子列表-->
            <el-submenu v-for="(item, flag) in catalogueList" v-if="Object.keys(item.subCatalogueList).length!=0"
                        :key="'cId'+item.id" :index="flag +'1'">
              <div slot="title" @click="addTeacherVisible=false">
                <el-checkbox v-if="sortVisualable" :label="item.id">&nbsp</el-checkbox>
                <span :id="'seq'+item.id" style="display: none" v-if="sortVisualable" class="seq"></span>
                <i class="el-icon-menu"></i>
                <span class="catalogueName" style="margin-right: 20px;margin-left: 8px;font-size: 16px">{{item.name}}</span>
                <el-button type="success" class="threeButton" @click="showAddSub(item.id)">添加子栏</el-button>
                <!--<el-button type="success" class="threeButton" size="small"    @click="topCatalogue(item.id)" >置顶</el-button>-->
                <el-button type="warning" class="threeButton"  @click="showEdit(item.id,item.name)">修改
                </el-button>
                <el-button type="danger" class="threeButton" @click="showDelete(item.id)">删除</el-button>

                <!--<i class="el-icon-school" v-if="item.state == 0"></i>
                <i class="el-icon-reading" v-else-if="item.state == 1"></i>
                <i class="el-icon-menu" v-else></i>-->
              </div>

              <el-menu-item-group>
                <el-menu-item style="padding-left: 95px;"
                              v-for="(sub, index) in item.subCatalogueList" :key="'subId'+sub.id"
                              :index="flag + '-'+ index"
                              @click="getTeacherByCatalogue(sub.id)">
                  <el-checkbox v-if="sortSubVisualable" style="padding-right: 15px;" :label="sub.id">&nbsp</el-checkbox>
                  <span :id="'seq_child'+sub.id" style="display: none" v-if="sortSubVisualable" class="seq"></span>
                  <span style="margin-right: 20px;margin-left: 8px;font-size: 16px" class="catalogueName">{{sub.name}}</span>
                  <el-button type="warning" class="threeButton"  @click="showEdit(sub.id,sub.name)">修改
                  </el-button>
                  <el-button type="danger" class="threeButton"  @click="showDelete(sub.id)">删除</el-button>
                </el-menu-item>

              </el-menu-item-group>

            </el-submenu>
            <!--假如没有子列表-->
            <el-menu-item v-else :key="'cId'+item.id" :index="flag +'1'">
              <div slot="title" @click="getTeacherByCatalogue(item.id,item.state)">
                <el-checkbox v-if="sortVisualable" :label="item.id">&nbsp</el-checkbox>
                <span :id="'seq'+item.id" style="display: none" v-if="sortVisualable" class="seq"></span>
                <i class="el-icon-menu"></i>
                <span class="catalogueName" style="margin-right: 20px;margin-left: 8px;font-size: 16px">{{item.name}}</span>
                <el-button type="success" class="threeButton"  @click="showAddSub(item.id)">添加子栏</el-button>
                <!--<el-button type="success" class="threeButton" size="small"    @click="topCatalogue(item.id)" >置顶</el-button>-->
                <el-button type="warning" class="threeButton" @click="showEdit(item.id,item.name)">修改
                </el-button>
                <el-button type="danger" class="threeButton"  @click="showDelete(item.id)">删除</el-button>

              </div>
            </el-menu-item>
          </el-checkbox-group>
        </el-menu>
      </el-card>
      <el-card class="box-card" style="width: 480px;float: left;margin-left:40px;margin-right: 20px">
        <el-collapse   style="padding: 10px 10px">
          <el-collapse-item title="功能说明" name="1" style="font-size: 16px" >
            <div >该页面主要功能为：通过栏目分配不同的栏目对教师进行合理的管理</div>
          </el-collapse-item>
          <el-collapse-item title="什么是栏目排序" name="2">
            <div>通过栏目排序管理对常用栏目提供一个显示优先级的好处</div>
          </el-collapse-item>
          <el-collapse-item title="如何自定义栏目列表" name="3">
            <div>通过对主栏目和子栏目的添加与删除实现自定义功能</div>
          </el-collapse-item>

        </el-collapse>
      </el-card>


    </div>

  </div>


</template>

<script>
    export default {
        data() {
            return {
                //变量
                defaultImage: 'this.src="../src/assets/img/defaultAvatar.png"',
                isActive: '',
                sourceUrl: 'http://47.106.132.95:2333/',
                listName: '最新更新',
                totalCount: 0, //分页组件--数据总条数
                totalUpdate: 0,// 学者网更新总数
                listLoading: false,//数据加载等待动画
                listQuery: {
                    unitId: '',
                    catalogue: ''
                },
                checkList: [],
                searchKey: '',
                addTeacherVisible: false,
                currentCat: '',//当前栏目
                currentName: '',
                searchList: [],
                catalogueList: [],
                multipleSelection: [],
                teacherSort: [],
                teacherSort_id: [],
                teacherList: [],
                dialogFormVisible: false,
                sortVisualable: false,
                teacherVisualable: false,
                unitVisualable: false,
                sortSubVisualable: false,
                form: {
                    tId: [],
                    cId: ''
                },
                seq_main: [],
                seq_child: [],
                seq_teacher: [],
                formLabelWidth: '120px'

            }
        },
        created() {
            this.getCatalogues();

        },
        ready() {
        }
        ,
        computed: {},
        methods: {
            teacher_check(e){
                alert("hhh")
            },
            sortCat() {
                if(this.teacherVisualable===true){
                    this.teacherVisualable=false;
                }
                this.sortVisualable = !this.sortVisualable;
                this.sortSubVisualable = false;
                this.checkList=[];
            },
            sortSubCat() {
                if(this.teacherVisualable===true){
                    this.teacherVisualable=false;
                }

                this.sortSubVisualable = !this.sortSubVisualable;
                this.sortVisualable = false;
                this.checkList=[];
            },
            sortTeacher() {
                if(this.sortVisualable===true||this.sortSubVisualable===true){
                    this.sortVisualable=false;
                    this.sortSubVisualable=false;
                }
                this.teacherVisualable = !this.teacherVisualable;
                this.teacherSort=[];
                this.teacherSort_id=[];
            },
            sortSubmit() {
                //排序目录
                this.seq_main = [];
                this.seq_child = [];
                this.seq_teacher = [];
                console.log(JSON.stringify(this.checkList))
                this.api({
                    url: "/catalogue/sortCatalogue",
                    method: "post",
                    data: {
                        "cIds": this.checkList,
                        "unitId": this.$store.getters.unitId
                    }
                }).then(data => {
                    this.$message.success('排序成功');
                    this.getCatalogues()
                    this.sortVisualable = false;
                    this.checkList = []
                }).catch(error => {
                    console.log("QAQ........添加失败")
                })

            },
            sortSubmitSub() {
                //排序目录
                console.log(JSON.stringify(this.checkList))
                this.api({
                    url: "/catalogue/sortCatalogue",
                    method: "post",
                    data: {
                        "cIds": this.checkList,
                        "unitId": this.$store.getters.unitId
                    }
                }).then(data => {
                    this.$message.success('排序成功');
                    this.getCatalogues()
                    this.sortVisualable = false;
                    this.checkList = []
                }).catch(error => {
                    console.log("QAQ........添加失败")
                })

            },
            sortTeacherSubmit(state) {
                //state参数0，即为目录教师排序
                if (!state) {
                    let ctIds = [];
                    //检查已选择教师的ID
                    console.log(JSON.stringify(this.teacherSort))
                    //把ID存到数组
                    for (let i = 0; i < this.teacherSort.length; i++) {

                        ctIds.push(this.teacherSort[i].ctId)
                    }
                    this.api({
                        url: "/catalogue/sortTeacher",
                        method: "post",
                        data: {
                            "ctIds": ctIds,
                            "id": this.currentCat
                        }
                    }).then(data => {
                        this.$message.success('排序成功');
                        this.getTeacherByCatalogue(this.currentCat)
                        this.teacherVisualable = false;
                        this.teacherSort = []
                    }).catch(error => {
                        console.log("QAQ........排序失败")
                    })
                }
                //否则，是整个学院教师排序
                else {
                    let tIds = [];
                    //检查已选择教师的ID
                    console.log(JSON.stringify(this.teacherSort))
                    for (let i = 0; i < this.teacherSort.length; i++) {

                        tIds.push(this.teacherSort[i].tId)
                    }
                    this.api({
                        url: "/catalogue/sortUnitTeacher",
                        method: "post",
                        data: {
                            "tIds": tIds,
                            "unitId": this.$store.getters.unitId
                        }
                    }).then(data => {
                        this.$message.success('排序成功');
                        this.getList()
                        this.unitVisualable = false;
                        this.teacherVisualable = false;
                        this.teacherSort = []
                    }).catch(error => {
                        console.log("QAQ........排序失败")
                    })
                }
            },
            changeFun(val) {
                this.multipleSelection = val // 返回的是选中的列的数组集合
                console.log(JSON.stringify(this.multipleSelection))
            },
            teacherChange(val) {
                this.teacherSort_id=[];
                val.forEach((val,index,arr)=>{
                   this.teacherSort_id.push(val.tId);
                });
                console.log(this.teacherSort_id);
                this.teacherList.forEach((v,k)=>{
                    let d = document.getElementById('seq_teacher'+v.tId);
                    d.style.display='none';
                });
                this.teacherSort_id.forEach((v,k)=>{
                   let d = document.getElementById('seq_teacher'+v);
                   d.style.display='inline';
                   d.innerText = k+1;
                });
                this.teacherSort = val // 返回的是选中的列的数组集合
                console.log(JSON.stringify(this.teacherSort))
            },
            showAdd() {
                if(this.teacherVisualable===true){
                    this.teacherVisualable=false;
                }
                this.$prompt('', '请输入主栏目名称', {
                    confirmButtonText: '确定',
                    cancelButtonText: '取消',
                }).then(({value}) => {
                    if (this.checkName(value)) {
                        this.api({
                            url: "/catalogue/addCatalogue",
                            method: "post",
                            data: {
                                "unitId": this.$store.state.user.unitId,
                                "catalogue": value
                            }
                        }).then(data => {
                            this.getCatalogues()
                        }).catch(error => {
                            console.log("QAQ........添加栏目失败")
                        })
                    } else
                        this.$message({
                            type: 'warning',
                            message: '该栏目已经存在，请重新输入'
                        });
                }).catch(() => {
                    this.$message({
                        type: 'info',
                        message: '取消操作'
                    });
                });
            },
            column_check(val){
              if(this.sortVisualable){
                  // 代表在排主栏目
                  this.catalogueList_id=[];
                  val.forEach((v,index,arr)=>{
                      this.catalogueList_id.push(v);
                  });
                  this.catalogueList.forEach((v,k)=>{
                      let d = document.getElementById('seq'+v.id);
                      d.style.display='none';
                  });
                  this.catalogueList_id.forEach((v,k)=>{
                      let d = document.getElementById('seq'+v);
                      d.style.display='inline';
                      d.innerText = k+1;
                  });
              }else if(this.sortSubVisualable){
                  // 代表在排子栏目
                  this.catalogueList_id=[];
                  val.forEach((v,index,arr)=>{
                      this.catalogueList_id.push(v);
                  });
                  console.log(this.catalogueList_id)
                  console.log(this.catalogueList)
                  this.catalogueList.forEach((v,k)=>{
                     v.subCatalogueList.forEach((vv,kk)=>{
                         let d = document.getElementById('seq_child'+vv.id);
                         d.style.display='none';
                     });
                  });
                  this.catalogueList_id.forEach((v,k)=>{
                      let d = document.getElementById('seq_child'+v);
                      d.style.display='inline';
                      d.innerText = k+1;
                  });
              }
            },
            showAddSub(cId) {

                //先查询该主目录有没有教师，如果有，返回失败；没有，则可以添加子目录
                this.api({
                    url: "/catalogue/getTeacherByCatalogue",
                    method: "get",
                    params: {id: cId}
                }).then(data => {
                    console.log("dataList....." + JSON.stringify(data));
                    if (Object.keys(data.list).length != 0) {
                        this.$message({
                            type: 'error',
                            message: '该主栏目已存在教师，添加子栏目失败！'
                        });
                        return
                    } else {
                        this.$prompt('', '请输入子栏目名称', {
                            confirmButtonText: '确定',
                            cancelButtonText: '取消',
                        }).then(({value}) => {
                            if (this.checkName(value)) {
                                this.api({
                                    url: "/catalogue/addSubCatalogue",
                                    method: "post",
                                    data: {
                                        "unitId": this.$store.state.user.unitId,
                                        "catalogue": value,
                                        "parentId": cId
                                    }
                                }).then(data => {
                                    this.getCatalogues()
                                }).catch(error => {
                                    console.log("QAQ........添加栏目失败")
                                })
                            } else
                                this.$message({
                                    type: 'warning',
                                    message: '该栏目已经存在，请重新输入'
                                });
                        }).catch(() => {
                            this.$message({
                                type: 'info',
                                message: '取消操作'
                            });
                        });
                    }

                }).catch(error => {
                    console.log("QAQ........查询教师失败")
                })
            },
            showDelete(cId) {
                this.$confirm('', '确定删除该栏目？', {
                    confirmButtonText: '确定',
                    cancelButtonText: '取消',
                }).then(() => {

                        this.api({
                            url: "/catalogue/deleteCatalogue",
                            method: "post",
                            data: {"cId": cId}
                        }).then(data => {
                            this.getCatalogues()
                        }).catch(error => {
                            console.log("QAQ........删除失败")
                        })
                    }
                ).catch(() => {
                    this.$message({
                        type: 'info',
                        message: '取消操作'
                    });
                });
            },
            showEdit(cId, name) {
                this.$prompt('', '请修改栏目名称', {
                    confirmButtonText: '修改',
                    cancelButtonText: '取消',
                    inputValue: name
                }).then(({value}) => {
                    if (this.checkName(value)) {
                        this.api({
                            url: "/catalogue/updateCatalogue",
                            method: "post",
                            data: {"cId": cId, newName: value}
                        }).then(data => {
                            this.getCatalogues()
                        }).catch(error => {
                            console.log("QAQ........添加学科失败")
                        })
                    } else
                        this.$message({
                            type: 'warning',
                            message: '该学科已经存在，请重新输入'
                        });
                }).catch(() => {
                    this.$message({
                        type: 'info',
                        message: '取消操作'
                    });
                });
            },
            routerTo(tId) {
                this.$router.push({
                    name: 'teacherPersonlHomePage',
                    params: {
                        id: tId
                    }
                })
            },
            checkName(value) {
                for (let a = 0; a < this.catalogueList.length; a++) {
                    if (this.catalogueList[a].name == value) {
                        return false
                    }
                }
                this.currentName = value
                return true
            },
            checkTeacherList(value) {
                for (let a = 0; a < this.teacherList.length; a++) {
                    if (this.teacherList[a].tId == value) {
                        return false
                    }
                }
                return true
            },
            hasTeacher(cId) {

                this.api({
                    url: "/catalogue/getTeacherByCatalogue",
                    method: "get",
                    params: {id: cId}
                }).then(data => {
                    console.log("dataList....." + JSON.stringify(data));
                    console.log(Object.keys(data.list).length);
                    if (Object.keys(data.list).length != 0)
                        return true
                    else
                        return false
                }).catch(error => {
                    console.log("QAQ........查询教师失败")
                })

            },
            getCatalogues() {

                this.listQuery.unitId = this.$store.state.user.unitId
                this.api({
                    url: "/catalogue/getCatalogues",
                    method: "get",
                    params: this.listQuery
                }).then(data => {
                    console.log(JSON.stringify(data))
                    this.catalogueList = data.list;

                }).catch(error => {
                    console.log("QAQ........没有找到栏目信息")
                })
            },

            getTeacherByCatalogue(cId, state) {
                console.log("state++++" + state);
                this.api({
                    url: "/catalogue/getTeacherByCatalogue",
                    method: "get",
                    params: {id: cId}
                }).then(data => {
                    console.log("CatalogueTeachers+++++" + JSON.stringify(data));
                    this.teacherList = data.list;
                    this.currentCat = cId;
                    this.unitVisualable = false;
                    //如果是部门、学科则不能增加教师，只能添加子目录，再添加教师
                    if (state != 0 && state != 1)
                        this.addTeacherVisible = true;
                    else
                        this.addTeacherVisible = false;
                }).catch(error => {
                    console.log("QAQ........没有找到教师")
                })
            },
            //添加教师
            addCatalogueTeacher() {
                let tIds = [];
                //检查已选择教师的ID
                console.log(JSON.stringify(this.multipleSelection))
                //检查教师是否已经加入该栏目
                for (let i = 0; i < this.multipleSelection.length; i++) {

                    if (!this.checkTeacherList(this.multipleSelection[i].tId)) {
                        this.$message({
                            type: 'warning',
                            message: '该教师已经存在在此栏目，请重新选择！'
                        });
                        return false;

                    } else tIds.push(this.multipleSelection[i].tId)
                }
                console.log("tIds===++++" + tIds);
                this.api({
                    url: "/catalogue/addCatalogueTeacher",
                    method: "post",
                    data: {"tIds": tIds, "cId": this.currentCat}
                }).then(data => {
                    this.$message.success('添加成功');
                    this.getTeacherByCatalogue(this.currentCat);
                    this.dialogFormVisible = false;
                }).catch(error => {
                    console.log("QAQ........添加失败");
                    this.$message.warning('请勾选要添加的教师');
                })
            },
            topTeacher(ctId) {
                this.$confirm('是否要在该栏目置顶该教师?', '提示', {
                    confirmButtonText: '确定',
                    cancelButtonText: '取消',
                    type: 'warning'
                }).then(() => {
                    this.api({
                        url: "/catalogue/topTeacher",
                        method: "post",
                        data: {
                            "ctId": ctId,
                            "tSeq": 1
                        }
                    }).then(data => {
                        this.getTeacherByCatalogue(this.currentCat);
                    }).catch(error => {
                        console.log("QAQ........删除失败")
                    })
                }).catch(() => {
                    this.$message({
                        type: 'info',
                        message: '已取消置顶'
                    });
                });

            },
            untopTeacher(ctId) {
                this.$confirm('是否要在该栏目置顶该教师?', '提示', {
                    confirmButtonText: '确定',
                    cancelButtonText: '取消',
                    type: 'warning'
                }).then(() => {
                    this.api({
                        url: "/catalogue/topTeacher",
                        method: "post",
                        data: {
                            "ctId": ctId,
                            "tSeq": 0
                        }
                    }).then(data => {
                        this.getTeacherByCatalogue(this.currentCat);
                    }).catch(error => {
                        console.log("QAQ........删除失败")
                    })
                }).catch(() => {
                    this.$message({
                        type: 'info',
                        message: '已取消置顶'
                    });
                });

            },
            handleOpen(key, keyPath) {
                console.log(key, keyPath);
            },
            handleClose(key, keyPath) {
                console.log(key, keyPath);
            }
        },
        components: {}
    }
</script>


<style rel="stylesheet/scss" lang="scss" scoped>
  @import '../../styles/catalogueVariables.scss';

  .newsLi {
    height: 76px;
    padding: 5px 5px 5px 0px;
  }

  .is-active {
    background-color: #CCCCCC !important;
    color: #409EFF;
  }

  .threeButton {
    float: right;
    margin: 4% 4% 2% 1%;
    padding: 2px 6px 3px 6px;
  }

  .catalogueName {
    width: 50px;
    overflow: hidden;
    white-space: nowrap;
    text-overflow: ellipsis;
  }

  .teacherLi {
    float: left;
    padding: 20px 30px 15px 5px;

  }

  .bigText {
    font-size: 24px;
    font-weight: bold;
    padding: 5px 10px 5px 0px;
  }

  .smallText {
    color: #8590a6;
  }

  .container {
    position: relative;
    flex-flow: row;
    flex-wrap: nowrap;
    justify-content: flex-start;
    align-items: center;
    width: 100%;
    height: 100%;
    margin: 0 auto;
    min-width: 1400px;

  }


  .header-navs {
    position: relative;
    border: 2px solid #3399CC;
  }

  .navs {
    height: 50px;
    line-height: 50px;
  }


  .nav {
    float: left;
    width: 120px;
    text-align: center;
    border-right: 2px solid #3399CC;
  }

  .nav-item {
    display: block;
    height: 50px;
    line-height: 50px;
    font-size: 16px;
    color: #3399CC;
  }

  .nav-item:hover {
    color: white;
    background-color: #3399CC;

  }

  .nav2 {
    display: inline-block;
    width: 30px;
    text-align: center;
  }

  .nav-item2 {
    display: block;
    height: 50px;
    line-height: 50px;
    font-size: 18px;
    text-decoration: none;
    color: #3399CC;
  }

  .nav-item2:hover {
    color: white;
    background-color: #3399CC;
  }

  .nav-item-active {
    color: white;
    background: #3399CC;
  }

  li {
    list-style-type: none;
  }

  .seq {
    background: #f56c6c;
    font-size: 18px;
    border-radius: 50px;
    padding: 3px;
    color: white;
    height: 55px;
    text-align: center;
  }

</style>
